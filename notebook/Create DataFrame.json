{
	"name": "Create DataFrame",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSprkPool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/dae2e175-080f-4d09-897c-aa5bba6dcc81/resourceGroups/AzureResourceGroup1/providers/Microsoft.Synapse/workspaces/azure-synapse-fur/bigDataPools/ApacheSprkPool1",
				"name": "ApacheSprkPool1",
				"type": "Spark",
				"endpoint": "https://azure-synapse-fur.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSprkPool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"new_rows = [('CA',22, 45000),(\"WA\",35,65000) ,(\"WA\",50,85000)]\r\n",
					"demo_df = spark.createDataFrame(new_rows, ['state', 'age', 'salary'])\r\n",
					"demo_df.show()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from azureml.opendatasets import NycTlcYellow\r\n",
					"\r\n",
					"data = NycTlcYellow()\r\n",
					"data_df = data.to_spark_dataframe()\r\n",
					"display(data_df.limit(10))\r\n",
					"\r\n",
					"data_df.createOrReplaceTempView('NycTlcYellow')"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT * FROM NycTlcYellow LIMIT 10"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\r\n",
					"val df = spark.read.sqlanalytics(\"DedicatedSQLPool1.dbo.FactInternetSales\") \r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.FactInternetSales\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}